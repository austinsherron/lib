---@diagnostic disable: invisible

local Stack = require 'toolbox.extensions.stack'

local assert = require 'luassert.assert'

require 'toolbox.test.extensions'


describe('Stack', function()
  describe('.new(...)', function()
    it('should create a new stack w/ the provided items', function()
      assert.stack(Stack.new(1, 2, 3, 4)).eq(Stack.new(1, 2, 3, 4))
    end)
    it('should create a new stack w/ a single initial item', function()
      assert.stack(Stack.new(3)).eq(Stack.new(3))
    end)
    it('should create a new stack w/ no initial items', function()
      assert.stack(Stack.new()).eq(Stack.new())
    end)
  end)

  describe('.copy(o)', function()
    it('should create a distinct instance w/ the same members as o', function()
      local stack = Stack.new(1, 2, 3, 4)
      local copy = Stack.copy(stack)

      assert.stack(stack).eq(copy)
      assert.stack(stack).Not.is(copy)

      copy:push(5)
      assert.stack(stack).is_not.eq(copy)
    end)
  end)

  describe(':__len()', function()
    it('should return 0 for an empty stack', function()
      assert.stack(Stack.new()).length(0)
    end)
    it('should return n where n == the number of items in the stack', function()
      local stack = Stack.new()

      assert.equals(#stack, 0)
      stack:push(1)
      assert.equals(#stack, 1)
      stack:push(2)
      assert.equals(#stack, 2)
      stack:push(3)
      assert.equals(#stack, 3)
      stack:pop()
      assert.equals(#stack, 2)
      stack:pop()
      assert.equals(#stack, 1)
      stack:pop()
      assert.equals(#stack, 0)
      stack:pop()
      assert.equals(#stack, 0)
      stack:push(8)
      assert.equals(#stack, 1)
      stack:pop()
      stack:pop()
      assert.equals(#stack, 0)
    end)
  end)

  describe(':empty()', function()
    it('should return true if the stack is empty', function()
      local stack = Stack.new()

      assert.True(stack:empty())
    end)
    it('should return false if the stack is not empty', function()
      local stack = Stack.new()

      assert.True(stack:empty())
      stack:push(1)
      assert.False(stack:empty())
      stack:push(2)
      assert.False(stack:empty())
      stack:pop()
      assert.False(stack:empty())
      stack:pop()
      assert.True(stack:empty())
      stack:pop()
      assert.True(stack:empty())
    end)
  end)

  describe(':push(item)', function()
    it('add items to the "end" the stack', function()
      local stack = Stack.new()

      stack:push(1)
      stack:push(2)
      stack:push(3)

      assert.equals(stack:pop(), 3)
      assert.equals(stack:pop(), 2)
      assert.equals(stack:pop(), 1)
      assert.equals(stack:pop(), nil)
    end)
  end)

  describe(':pop()', function()
    it('should pop items off the end of the stack', function()
      local stack = Stack.new()

      stack:push(1)
      stack:push(2)
      stack:push(3)
      assert.equals(stack:pop(), 3)
      assert.equals(stack:pop(), 2)
      stack:push(4)
      stack:push(5)
      assert.equals(stack:pop(), 5)
      assert.equals(stack:pop(), 4)
      assert.equals(stack:pop(), 1)
      stack:push(10)
      stack:push(11)
      assert.equals(stack:pop(), 11)
      assert.equals(stack:pop(), 10)
      assert.equals(stack:pop(), nil)
    end)
  end)

  describe(':peek()', function()
    it('should show the top stack item w/out modifying the stack', function()
      local stack = Stack.new()

      stack:push(1)
      stack:push(2)
      stack:push(3)
      assert.equals(stack:peek(), 3)
      assert.equals(stack:peek(), 3)
      assert.equals(stack:pop(), 3)
      assert.equals(stack:peek(), 2)
      assert.equals(stack:pop(), 2)
      assert.equals(stack:pop(), 1)
      assert.equals(stack:peek(), nil)
    end)
  end)

  describe(':peekall()', function()
    it('should show the all items in the stack item w/out modifying the stack', function()
      local s = Stack.new()

      s:push(1)
      s:push(2)
      s:push(3)
      assert.array(s:peekall()).eq({ 3, 2, 1 })
      assert.array(s:peekall()).eq({ 3, 2, 1 })
      assert.equals(s:pop(), 3)
      assert.array(s:peekall()).eq({ 2, 1 })
      assert.equals(s:pop(), 2)
      assert.equals(s:pop(), 1)
      assert.equals(s:peek(), nil)
    end)
  end)

  describe(':pushall(...)', function()
    it('should push all items onto the stack', function()
      local s = Stack.new()

      s:push(1)
      s:push(2)

      assert.equals(s:pop(), 2)
      s:pushall(3, 4, 5, 6)
      assert.equals(s:pop(), 6)
      assert.equals(s:pop(), 5)
      assert.equals(s:pop(), 4)
      assert.equals(s:pop(), 3)
      s:pushall()
      assert.equals(s:pop(), 1)
      s:pushall(1)
      assert.equals(s:pop(), 1)
      assert.equals(s:pop(), nil)
    end)
  end)

  describe(':__eq(o)', function()
    it('should return true when both stacks are equal', function()
      assert.True(Stack.new() == Stack.new())
      assert.True(Stack.new(1) == Stack.new(1))
      assert.True(Stack.new(1, 2) == Stack.new(1, 2))

      assert.True(Stack.new('a') == Stack.new('a'))
      assert.True(Stack.new('a', 'b') == Stack.new('a', 'b'))
    end)
    it('should return false when the stacks are unequal', function()
      assert.False(Stack.new() == Stack.new(1))
      assert.False(Stack.new(1) == Stack.new())
      assert.False(Stack.new(1, 2) == Stack.new(1))
      assert.False(Stack.new(1) == Stack.new(1, 2))
      assert.False(Stack.new(1, 2) == Stack.new(2, 1))

      assert.False(Stack.new('a', 'b', 'c') == Stack.new('d', 'e', 'f'))
      assert.False(Stack.new('a', 'b') == Stack.new('a', 'b', 'c'))
    end)
  end)

  describe(':__ipairs(o)', function()
    it("should yeild the stack's items in the right order w/out modifying the stack", function()
      local s = Stack.new()
      s:pushall(1, 2, 3)

      local c = Stack.copy(s)
      local idx = 1

      for i, v in ipairs(s) do
        assert.equals(idx, i)
        assert.equals(v, c:pop())

        idx = idx + 1
      end

      assert.Nil(c:pop())
      assert.equals(s:pop(), 3)
      assert.equals(s:pop(), 2)
      assert.equals(s:pop(), 1)
      assert.Nil(s:pop())
    end)
  end)

  describe(':__tostring()', function()
    it('should return a string representation of the stack', function()
      assert.equals(tostring(Stack.new()), 'stack()')
      assert.equals(tostring(Stack.new(1)), 'stack(1)')
      assert.equals(tostring(Stack.new(1, 2)), 'stack(1, 2)')
      assert.equals(tostring(Stack.new(3, 2, 1)), 'stack(3, 2, 1)')
    end)
  end)
end)

