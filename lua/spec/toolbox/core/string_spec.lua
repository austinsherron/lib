local Common = require 'toolbox.core.__common'
local String = require 'toolbox.core.string'

local assert = require 'luassert.assert'


describe('String', function()
  describe('.is(x)', function()
    it('should return true if x is a string', function()
      assert.True(String.is('1'))
      assert.True(String.is('a number'))
      assert.True(String.is(''))
      assert.True(String.is('  '))
    end)
    it('should return false if x is not a number', function()
      assert.False(String.is(true))
      assert.False(String.is(false))
      assert.False(String.is({ 1, 2, 3 }))
      assert.False(String.is({ a = 1, b = 2, c = 3 }))
      assert.False(String.is(nil))
      assert.False(String.is(1))
      assert.False(String.is(0))
      assert.False(String.is(-3))
      assert.False(String.is(82.421))
      assert.False(String.is(-3.145))
      assert.False(String.is(1.71e-5))
      assert.False(String.is(3.51E-7))
      assert.False(String.is(0x1F4))
    end)
  end)

  describe('.nil_or_empty(str)', function()
    it('should return true if str is empty', function()
      assert.True(String.nil_or_empty(''))
    end)
    it('should return true if str is nil', function()
      assert.True(String.nil_or_empty(nil))
    end)
    it('should return false if str is not nil nor empty', function()
      assert.False(String.nil_or_empty(' hello '))
      assert.False(String.nil_or_empty('    '))
      assert.False(String.nil_or_empty('\n'))
      assert.False(String.nil_or_empty('\t'))
      assert.False(String.nil_or_empty('\r'))
      assert.False(String.nil_or_empty('11130  80!#%'))
    end)
  end)

  describe('.not_nil_or_empty(str)', function()
    it('should return false if str is empty', function()
      assert.False(String.not_nil_or_empty(''))
    end)
    it('should return false if str is nil', function()
      assert.False(String.not_nil_or_empty(nil))
    end)
    it('should return true if str is not nil nor empty', function()
      assert.True(String.not_nil_or_empty(' hello '))
      assert.True(String.not_nil_or_empty('    '))
      assert.True(String.not_nil_or_empty('\n'))
      assert.True(String.not_nil_or_empty('\t'))
      assert.True(String.not_nil_or_empty('\r'))
      assert.True(String.not_nil_or_empty('11130  80!#%'))
    end)
  end)

  describe('.contains(str, substr)', function()
    it('should return true if substr is a substring of str', function()
      assert.True(String.contains('this is a string', 'this'))
      assert.True(String.contains('this is a string', 'string'))
      assert.True(String.contains('this is a string', 'rin'))
      assert.True(String.contains('this is a string', ' is a'))
      assert.True(String.contains('this is a string', ' is'))
      assert.True(String.contains('this is a string', ' is '))
      assert.True(String.contains('this is a string', ' '))
      assert.True(String.contains('this is a string', ' '))
    end)
    it('should return false if substr is not a substring of str', function()
      assert.False(String.contains('this is a string', 'but'))
      assert.False(String.contains('this is a string', 'these'))
      assert.False(String.contains('this is a string', 'absolutely'))
      assert.False(String.contains('this is a string', "aren't"))
      assert.False(String.contains('this is a string', 'substrings'))
      assert.False(String.contains('this is a string', 'of any kind'))
    end)
  end)

  describe('.capitalize(str)', function()
    describe('regularize ==  true', function()
      it('should capitalize the string regardless of capitalization', function()
        assert.equals(String.capitalize('sOmeTHing'), 'Something')
        assert.equals(String.capitalize('SOmeThINg'), 'Something')
        assert.equals(String.capitalize('something'), 'Something')
        assert.equals(String.capitalize('SOMETHING'), 'Something')

        assert.equals(String.capitalize('hello there lovely'), 'Hello there lovely')
        assert.equals(String.capitalize('Hello There Lovely'), 'Hello there lovely')
      end)
      it('should do nothing to the empty string', function()
        assert.equals(String.capitalize(''), '')
      end)
    end)
    describe('regularize ==  false', function()
      it('should capitalize the string regardless of capitalization', function()
        assert.equals(String.capitalize('sOmeTHing', false), 'SOmeTHing')
        assert.equals(String.capitalize('SOmeThINg', false), 'SOmeThINg')
        assert.equals(String.capitalize('something', false), 'Something')
        assert.equals(String.capitalize('SOMETHING', false), 'SOMETHING')

        assert.equals(String.capitalize('hello there lovely', false), 'Hello there lovely')
        assert.equals(String.capitalize('Hello There Lovely', false), 'Hello There Lovely')
      end)
      it('should do nothing to the empty string', function()
        assert.equals(String.capitalize(''), '')
      end)
    end)
  end)

  describe('.lower(str)', function()
    it('should lowercase str regardless of existing case', function()
      assert.equals(String.lower('sOmeTHing'), 'something')
      assert.equals(String.lower('SOmeThINg'), 'something')
      assert.equals(String.lower('something'), 'something')
      assert.equals(String.lower('SOMETHING'), 'something')

      assert.equals(String.lower('hello there lovely'), 'hello there lovely')
      assert.equals(String.lower('Hello There Lovely'), 'hello there lovely')
    end)
    it('should do nothing to the empty string', function()
      assert.equals(String.lower(''), '')
    end)
  end)

  describe('.upper(str)', function()
    it('should uppercase str regardless of existing case', function()
      assert.equals(String.upper('sOmeTHing'), 'SOMETHING')
      assert.equals(String.upper('SOmeThINg'), 'SOMETHING')
      assert.equals(String.upper('something'), 'SOMETHING')
      assert.equals(String.upper('SOMETHING'), 'SOMETHING')

      assert.equals(String.upper('hello there lovely'), 'HELLO THERE LOVELY')
      assert.equals(String.upper('Hello There Lovely'), 'HELLO THERE LOVELY')
    end)
    it('should do nothing to the empty string', function()
      assert.equals(String.upper(''), '')
    end)
  end)

  describe('.startswith(str, pfx)', function()
    it('should return true if the beginning subtring of str is pfx', function()
      assert.True(String.startswith('hey there', 'hey'))
      assert.True(String.startswith('hey there', 'hey th'))
      assert.True(String.startswith('hey there', 'hey there'))
    end)
    it('should return true if the beginning subtring of str is pfx and it starts w/ whitespace', function()
      assert.True(String.startswith('  hey there', ' '))
      assert.True(String.startswith('  hey there', '  '))
      assert.True(String.startswith('  hey there', '  he'))
      assert.True(String.startswith('  hey there', '  hey'))
      assert.True(String.startswith('  hey there', '  hey the'))
      assert.True(String.startswith('  hey there', '  hey there'))
    end)
    it('should return false if the beginning subtring of str is not pfx', function()
      assert.False(String.startswith('hey there', 'xx'))
      assert.False(String.startswith('hey there', 'xoxo'))
      assert.False(String.startswith('hey there', 'ey there'))
      assert.False(String.startswith('hey there', 'there'))
      assert.False(String.startswith('hey there', ' there'))
    end)
    it('should return false if str is nil or empty', function()
      assert.False(String.startswith('', 'hey'))
      assert.False(String.startswith(nil, 'hey'))
    end)
    it('should return false if pfx is nil or empty', function()
      assert.False(String.startswith('hey', ''))
      assert.False(String.startswith('hey', nil))
    end)
    it('should return false if str and pfx are nil or empty', function()
      assert.False(String.startswith('', ''))
      assert.False(String.startswith('', nil))
      assert.False(String.startswith(nil, ''))
      assert.False(String.startswith(nil, nil))
    end)
  end)

  describe('.endswith(str, sfx)', function()
    it('should return true if the end subtring of str is sfx', function()
      assert.True(String.endswith('hey there', 'there'))
      assert.True(String.endswith('hey there', 'ey there'))
      assert.True(String.endswith('hey there', 'hey there'))
    end)
    it('should return true if the end subtring of str is sfx and it starts w/ whitespace', function()
      assert.True(String.endswith('hey there  ', ' '))
      assert.True(String.endswith('hey there  ', '  '))
      assert.True(String.endswith('hey there  ', 'ere  '))
      assert.True(String.endswith('hey there  ', 'there  '))
      assert.True(String.endswith('hey there  ', 'ey there  '))
      assert.True(String.endswith('hey there  ', 'hey there  '))
    end)
    it('should return false if the end subtring of str is not sfx', function()
      assert.False(String.endswith('hey there', 'xx'))
      assert.False(String.endswith('hey there', 'xoxo'))
      assert.False(String.endswith('hey there', 'hey the'))
      assert.False(String.endswith('hey there', 'hey'))
      assert.False(String.endswith('hey there', 'hey '))
    end)
    it('should return false if str is nil or empty', function()
      assert.False(String.endswith('', 'hey'))
      assert.False(String.endswith(nil, 'hey'))
    end)
    it('should return false if pfx is nil or empty', function()
      assert.False(String.endswith('hey', ''))
      assert.False(String.endswith('hey', nil))
    end)
    it('should return false if str and pfx are nil or empty', function()
      assert.False(String.endswith('', ''))
      assert.False(String.endswith('', nil))
      assert.False(String.endswith(nil, ''))
      assert.False(String.endswith(nil, nil))
    end)
  end)

  describe('.firstword(str)', function()
    it('should return the first whitespace delimited word from str', function()
      assert.equals(String.firstword('how do bugaboo?'), 'how')
      assert.equals(String.firstword("  pretty swell how 'bout you?"), 'pretty')
      assert.equals(String.firstword('wait\t\t you can talk?'), 'wait')
      assert.equals(String.firstword('  I\n\t\t can at that'), 'I')
    end)
    it('should return the first whitespace delimited word from a single word str', function()
      assert.equals(String.firstword('bugaboo?'), 'bugaboo?')
      assert.equals(String.firstword('bugaboo'), 'bugaboo')
      assert.equals(String.firstword('   bugaboo   '), 'bugaboo')
      assert.equals(String.firstword('   \n\tbugaboo   \t\n'), 'bugaboo')
    end)
    it('should return nil if str is empty', function()
      assert.Nil(String.firstword(''))
    end)
  end)

  describe('.trim(str, to_trim)', function()
    it('should trim one occurence of to_trim from both sides of str', function()
      assert.equals(String.trim(' str ', ' '), 'str')
      assert.equals(String.trim('xstrx', 'x'), 'str')
      assert.equals(String.trim('xxstrxx', 'xx'), 'str')
      assert.equals(String.trim('xx str xx', 'xx'), ' str ')
      assert.equals(String.trim('xxthis is a strxx', 'xx'), 'this is a str')
      assert.equals(String.trim('xxthisxxisxxaxxstrxx', 'xx'), 'thisxxisxxaxxstr')
    end)
    it('should trim multiple occurences of to_trim from both sides of str', function()
      assert.equals(String.trim('   str   ', ' '), 'str')
      assert.equals(String.trim('   str  ', ' '), 'str')
      assert.equals(String.trim('  str   ', ' '), 'str')

      assert.equals(String.trim('xxxstrxxx', 'x'), 'str')
      assert.equals(String.trim('xxstrxxx', 'x'), 'str')
      assert.equals(String.trim('xxxstrxx', 'x'), 'str')

      assert.equals(String.trim('xxxxxxstrxxxxxx', 'xx'), 'str')
      assert.equals(String.trim('xxxxstrxxxxxx', 'xx'), 'str')
      assert.equals(String.trim('xxxxxxstrxxxx', 'xx'), 'str')

      assert.equals(String.trim('xxxxxx str xxxxxx', 'xx'), ' str ')
      assert.equals(String.trim('xxxx str xxxxxx', 'xx'), ' str ')
      assert.equals(String.trim('xxxx str xxxx', 'xx'), ' str ')

      assert.equals(String.trim('xxxxxxthis is a strxxxxxx', 'xx'), 'this is a str')
      assert.equals(String.trim('xxxxthis is a strxxxxxx', 'xx'), 'this is a str')
      assert.equals(String.trim('xxxxxxthis is a strxxxx', 'xx'), 'this is a str')

      assert.equals(String.trim('xxxxxxthisxxisxxaxxstrxxxxxx', 'xx'), 'thisxxisxxaxxstr')
      assert.equals(String.trim('xxxxthisxxisxxaxxstrxxxxxx', 'xx'), 'thisxxisxxaxxstr')
      assert.equals(String.trim('xxxxxxthisxxisxxaxxstrxxxx', 'xx'), 'thisxxisxxaxxstr')

      -- FIXME: this is a bug, as not all x's should be trimmed
      -- assert.equals(String.trim('xxxxx str xxxxx', 'xx'), 'x str x')
      -- assert.equals(String.trim('xxxx str xxxxx', 'xx'), ' str x')
      -- assert.equals(String.trim('xxxxx str xxxx', 'xx'), 'x str ')
    end)
    -- FIXME: this doesn't work the way we want it to
    -- it('should trim one occurrence of to_trim from either side of str', function()
    --   assert.equals(String.trim(' str', ' '), 'str')
    --   assert.equals(String.trim('str ', ' '), 'str')
    --
    --   assert.equals(String.trim('xstr', 'x'), 'str')
    --   assert.equals(String.trim('strx', 'x'), 'str')
    --
    --   assert.equals(String.trim('xxstr', 'xx'), 'str')
    --   assert.equals(String.trim('strxx', 'xx'), 'str')
    --
    --   assert.equals(String.trim('xx str ', 'xx'), ' str ')
    --   assert.equals(String.trim(' str xx', 'xx'), ' str ')
    --
    --   assert.equals(String.trim('xxthis is a str', 'xx'), 'this is a str')
    --   assert.equals(String.trim('this is a strxx', 'xx'), 'this is a str')
    --
    --   assert.equals(String.trim('xxthisxxisxxaxxstr', 'xx'), 'thisxxisxxaxxstr')
    --   assert.equals(String.trim('thisxxisxxaxxstrxx', 'xx'), 'thisxxisxxaxxstr')
    -- end)
    -- FIXME: this doesn't work the way we want it to
    -- it('should trim multiple occurrences of to_trim from either side of str', function()
    -- end)
    it("should do nothing if to_trim doesn't occur in str", function()
      assert.equals(String.trim('  str  ', 'x'), '  str  ')
    end)
  end)

  describe('.trim_before(str, delim)', function()
    it('should return the substring after delim', function()
      assert.equals(String.trim_before('oh, hello.', ','), ' hello.')
      assert.equals(String.trim_before('oh, hello.', ' '), 'hello.')
    end)
    it('should use the first occurence of delim if it occurs mutliple times in str', function()
      assert.equals(String.trim_before('oh,  hello.', ' '), ' hello.')
      assert.equals(String.trim_before('oh, hello.', 'h'), ', hello.')
    end)
    it('should return the substring after delim if str starts w/ delim', function()
      assert.equals(String.trim_before('oh, hello.', 'o'), 'h, hello.')
    end)
    it('should return the substring after delim if str ends w/ delim', function()
      assert.equals(String.trim_before('oh, hello.', '.'), '')
    end)
    it("should do nothing if delim dosn't occur in str", function()
      assert.equals(String.trim_before('oh, hello.', 'z'), 'oh, hello.')
    end)
    it('should raise an error if #delim > 1', function()
      assert.has_error(function() String.trim_before('oh, hello.', 'hel') end)
    end)
  end)

  describe('.trim_after(str, delim)', function()
    it('should return the substring before delim', function()
      assert.equals(String.trim_after('oh, hello.', ','), 'oh')
      assert.equals(String.trim_after('oh, hello.', ' '), 'oh,')
    end)
    it('should use the first occurence of delim if it occurs mutliple times in str', function()
      assert.equals(String.trim_after('oh,  hello.', ' '), 'oh,')
      assert.equals(String.trim_after('oh, hello.', 'h'), 'o')
    end)
    it('should return the substring before delim if str starts w/ delim', function()
      assert.equals(String.trim_after('oh, hello.', 'o'), '')
    end)
    it('should return the substring before delim if str ends w/ delim', function()
      assert.equals(String.trim_after('oh, hello.', '.'), 'oh, hello')
    end)
    it("should do nothing if delim dosn't occur in str", function()
      assert.equals(String.trim_after('oh, hello.', 'z'), 'oh, hello.')
    end)
    it('should raise an error if #delim > 1', function()
      assert.has_error(function() String.trim_after('oh, hello.', 'hel') end)
    end)
  end)

  describe('.join(arr, sep)', function()
    it('should construct a string from the parts of arr delimited by a char sep', function()
      assert.equals(String.join({ 'join', 'these', 'parts' }, ' '), 'join these parts')
    end)
    it('should construct a string from the parts of arr delimited by a string sep', function()
      assert.equals(String.join({ 'join', 'these', 'parts' }, ', '), 'join, these, parts')
    end)
  end)

  describe('.rjoin(arr, separators, ldelims, rdelims)', function()
    it('should construct a string from the arguments', function()
      assert.equals(String.rjoin({ 'join', 'these', 'parts' }, { ' ' }), 'join these parts')
    end)
    it('should recursively construct a string from the arguments', function()
      local str = String.rjoin(
        { 'join', { 'and', 'these', 'subparts' }, 'these', 'parts' },
        { ' ' },
        { '', '(' },
        { '', ')' }
      )
      assert.equals(str, 'join (and these subparts) these parts')
    end)
    it('should recursively, w/ arbitrary nesting, construct a string from the arguments', function()
      local str = String.rjoin(
        { 'join', { 'and', 'these', { 'and', 'these', 'sub', { 'more', 'sub' }, 'sub' }, 'subparts' }, 'these', { 'less', 'sub' }, 'parts' },
        { ' ', ',' },
        { '', '(', '{' },
        { '', ')', '}' }
      )
      assert.equals(str, 'join (and,these,{and,these,sub,{more,sub},sub},subparts) these {less,sub} parts')
    end)
  end)

  describe('.split(str, sep)', function()
    it('should return an array of strings split on sep', function()
      assert.True(Common.Array.equals(
        String.split('helloxxxtherexxxbeautiful', 'xxx'),
        { 'hello', 'there', 'beautiful' }
      ))
      assert.True(Common.Array.equals(
        String.split('helloxxxtherexxxbeautiful', 'x'),
        { 'hello', 'there', 'beautiful' }
      ))
      assert.True(Common.Array.equals(
        String.split('hello there   beautiful', ' '),
        { 'hello', 'there', 'beautiful' }
      ))
    end)
    it('should return an array of strings split on sep if sep occurs on either end', function()
      assert.True(Common.Array.equals(
        String.split('xhelloxxxtherexxxbeautifulx', 'x'),
        { 'hello', 'there', 'beautiful' }
      ))
      assert.True(Common.Array.equals(
        String.split(' hello   there   beautiful   ', ' '),
        { 'hello', 'there', 'beautiful' }
      ))
    end)
    it("should do nothing if sep doesn't occur in str", function()
      assert.True(Common.Array.equals(
        String.split('xhelloxxxtherexxxbeautifulx', ' '),
        { 'xhelloxxxtherexxxbeautifulx' }
      ))
      assert.True(Common.Array.equals(
        String.split(' hello   there   beautiful ', 'x'),
        { ' hello   there   beautiful ' }
      ))
    end)
  end)

  describe('.split_lines(str)', function()
    it('should return an array of strings split on newlines', function()
      assert.True(Common.Array.equals(
        String.split_lines('hello\nthere\nbeautiful'),
        { 'hello', 'there', 'beautiful' }
      ))
    end)
    it('should return an array of strings split on sep if newlines occur on either end', function()
      assert.True(Common.Array.equals(
        String.split_lines('\nhello\nthere\nbeautiful\n'),
        { 'hello', 'there', 'beautiful' }
      ))
    end)
    it("should do nothing if newlines don't occur in str", function()
      assert.True(Common.Array.equals(
        String.split_lines('hello there beautiful'),
        { 'hello there beautiful' }
      ))
    end)
  end)

  describe('.tostring(obj)', function()
    it('should stringify abritrary simple objects', function()
      assert.equals(String.tostring('obj'), 'obj')
      assert.equals(String.tostring('something something String.tostring'), 'something something String.tostring')
      assert.equals(String.tostring(1), '1')
      assert.equals(String.tostring(-1), '-1')
      assert.equals(String.tostring(3.14), '3.14')
      assert.equals(String.tostring(1.71e-5), '1.71e-05')
      assert.equals(String.tostring(3.51E-7), '3.51e-07')
      assert.equals(String.tostring(0x1F4), '500')
      assert.equals(String.tostring(true), 'true')
      assert.equals(String.tostring(false), 'false')
      assert.equals(String.tostring(nil), 'nil')
    end)
    it('should stringify simple array-like tables', function()
      assert.equals(String.tostring({}), '{ }')
      assert.equals(String.tostring({ nil }), '{ }')
      assert.equals(String.tostring({ nil, nil }), '{ }')
      assert.equals(String.tostring({ 1, 2, 3, 4 }), '{ 1, 2, 3, 4 }')
      assert.equals(String.tostring({ 'a', 'b', 'c', 'd' }), '{ a, b, c, d }')
      assert.equals(String.tostring({ true, false, true, true, false }), '{ true, false, true, true, false }')
    end)
    it('should stringify simple dict-like tables', function()
      assert.equals(String.tostring({}), '{ }')
      assert.equals(String.tostring({ a = nil }), '{ }')
      assert.equals(String.tostring({ a = nil, b = nil }), '{ }')
      assert.equals(String.tostring({ a = 1, b = 2, c = 3, d = 4 }), '{ a = 1, b = 2, c = 3, d = 4 }')
      assert.equals(String.tostring({ [1] = 'a', [2] = 'b', [3] = 'c' }), '{ 1 = a, 2 = b, 3 = c }')
      assert.equals(String.tostring({ a = true, z = false }), '{ a = true, z = false }')
    end)
    it('should stringify complex tables', function()
      -- FIXME: this doesn't work the way it should
      -- assert.equals(String.tostring({ nil, { nil }}), '{ }')
      assert.equals(String.tostring({ 1, 2, { 3, 4, 5, { 6, 7, 8, { 9 }, 10 }, 11 }}), '{ 1, 2, { 3, 4, 5, { 6, 7, 8, { 9 }, 10 }, 11 } }')
      assert.equals(String.tostring({ b = { [2] = { z = { 'a', 1, 3, 2 }}}}), '{ b = { 2 = { z = { a, 1, 3, 2 } } } }')
    end)
  end)

  describe('.lpad(str, char, len)', function()
    it('should pad str on the left w/ char up to len', function()
      assert.equals(String.lpad('a str', 'x', 10), 'xxxxxa str')
      assert.equals(String.lpad('a str', '$', 10), '$$$$$a str')
      assert.equals(String.lpad('a str', ' ', 10), '     a str')
      assert.equals(String.lpad('a str', 'x', 6), 'xa str')
      assert.equals(String.lpad('a str', '$', 6), '$a str')
      assert.equals(String.lpad('a str', ' ', 6), ' a str')
    end)
    it('should do nothing if len <= len(str)', function()
      assert.equals(String.lpad('a str', 'x', 5), 'a str')
      assert.equals(String.lpad('a str', '$', 4), 'a str')
      assert.equals(String.lpad('a str', ' ', 3), 'a str')
      assert.equals(String.lpad('a str', 'x', 2), 'a str')
      assert.equals(String.lpad('a str', '$', 1), 'a str')
      assert.equals(String.lpad('a str', ' ', 0), 'a str')
      assert.equals(String.lpad('a str', 'x', -1), 'a str')
    end)
    it('should raise an error if char is > 1', function()
      assert.has_error(function() String.lpad('a str', 'xx', 10) end)
      assert.has_error(function() String.lpad('a str', 'xxx', 10) end)
    end)
    it('should raise an error if char the empty string', function()
      assert.has_error(function() String.lpad('a str', '', 10) end)
    end)
  end)

  describe('.rpad(str, char, len)', function()
    it('should pad str on the right w/ char up to len', function()
      assert.equals(String.rpad('a str', 'x', 10), 'a strxxxxx')
      assert.equals(String.rpad('a str', '$', 10), 'a str$$$$$')
      assert.equals(String.rpad('a str', ' ', 10), 'a str     ')
      assert.equals(String.rpad('a str', 'x', 6), 'a strx')
      assert.equals(String.rpad('a str', '$', 6), 'a str$')
      assert.equals(String.rpad('a str', ' ', 6), 'a str ')
    end)
    it('should do nothing if len <= len(str)', function()
      assert.equals(String.rpad('a str', 'x', 5), 'a str')
      assert.equals(String.rpad('a str', '$', 4), 'a str')
      assert.equals(String.rpad('a str', ' ', 3), 'a str')
      assert.equals(String.rpad('a str', 'x', 2), 'a str')
      assert.equals(String.rpad('a str', '$', 1), 'a str')
      assert.equals(String.rpad('a str', ' ', 0), 'a str')
      assert.equals(String.rpad('a str', 'x', -1), 'a str')
    end)
    it('should raise an error if char is > 1', function()
      assert.has_error(function() String.rpad('a str', 'xx', 10) end)
      assert.has_error(function() String.rpad('a str', 'xxx', 10) end)
    end)
    it('should raise an error if char the empty string', function()
      assert.has_error(function() String.rpad('a str', '', 10) end)
    end)
  end)

  describe('.fmt(base, ...)', function()
    it('should format arbitrary args into base', function()
      assert.equals(
        String.fmt('hello there %s, %s to see you!', 'Bobert', 'wonderful'),
        'hello there Bobert, wonderful to see you!'
      )
      assert.equals(
        String.fmt('hello there %s, %s to see you!', 'Massandra', 'awful'),
        'hello there Massandra, awful to see you!'
      )
      assert.equals(
        String.fmt('%s + %s %s in fact, equal %s', 3, 3, 'does', 4),
        '3 + 3 does in fact, equal 4'
      )
      assert.equals(
        String.fmt('%s + %s %s in fact, equal %s', 3, 3, 'does not', 6),
        '3 + 3 does not in fact, equal 6'
      )
    end)
    it('should return base if no args are provided', function()
      assert.equals(
        String.fmt("I'm a little teapot, short and stout"),
        "I'm a little teapot, short and stout"
      )
      assert.has.error(function () String.fmt('%s + %s %s in fact, equal %s') end)
    end)
    it('should return base if base is the empty string, regardless of args provided', function()
      assert.equals(String.fmt('', nil, 25, false), '')
      assert.equals(String.fmt(''), '')
    end)
  end)
end)
