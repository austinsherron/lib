local Num = require 'toolbox.core.num'


describe('Num', function()
  describe('.is(x)', function()
    it('should return true if x is a number', function()
      assert.True(Num.is(1))
      assert.True(Num.is(0))
      assert.True(Num.is(-3))
      assert.True(Num.is(82.421))
      assert.True(Num.is(-3.145))
      assert.True(Num.is(1.71e-5))
      assert.True(Num.is(3.51E-7))
      assert.True(Num.is(0x1F4))
    end)
    it('should return false if x is not a number', function()
      assert.False(Num.is("1"))
      assert.False(Num.is("a number"))
      assert.False(Num.is(true))
      assert.False(Num.is(false))
      assert.False(Num.is({ 1, 2, 3 }))
      assert.False(Num.is({ a = 1, b = 2, c = 3 }))
      assert.False(Num.is(nil))
    end)
  end)

  describe('.isint(x)', function()
    it('should return true if x is a number', function()
      assert.True(Num.isint(1000))
      assert.True(Num.isint(1))
      assert.True(Num.isint(0))
      assert.True(Num.isint(-3))
      assert.True(Num.isint(-823))
      assert.True(Num.isint(0x1F4))
      assert.True(Num.isint(1.71e+2))
    end)
    it('should return false if x is not a number', function()
      assert.False(Num.isint(82.421))
      assert.False(Num.isint(-3.145))
      assert.False(Num.isint(1.71e-5))
      assert.False(Num.isint(3.51E-7))
      assert.False(Num.isint(0x1F5.E))
      assert.False(Num.isint("1"))
      assert.False(Num.isint("a number"))
      assert.False(Num.isint(true))
      assert.False(Num.isint(false))
      assert.False(Num.isint({ 1, 2, 3 }))
      assert.False(Num.isint({ a = 1, b = 2, c = 3 }))
      assert.False(Num.isint(nil))
    end)
  end)

  describe('.bounds(n, min, max)', function()
    local min, max = 0, 5

    it('should return n if min < n < max', function()
      local result = Num.bounds(3, min, max)
      assert.equals(result, 3)
    end)
    it('should return n/min if min <= n < max', function()
      local result = Num.bounds(min, min, max)
      assert.equals(result, min)
    end)
    it('should return n/max if min < n <= max', function()
      local result = Num.bounds(max, min, max)
      assert.equals(result, max)
    end)
    it('should return min if n < min', function()
      local result = Num.bounds(-2, min, max)
      assert.equals(result, min)
    end)
    it('should return max if n > max', function()
      local result = Num.bounds(9, min, max)
      assert.equals(result, max)
    end)
    it('should return n i min == n == max', function()
      local result = Num.bounds(max, max, max)
      assert.equals(result, max)
    end)
    it('should raise and error if min > max', function()
      assert.has.errors(function() Num.bounds(3, max, min) end)
    end)
  end)
end)

