local Common = require 'toolbox.core.__common'
local Array  = require 'toolbox.core.array'

local IsArrayStrategy = Array.IsArrayStrategy


describe('Array', function()
  describe('.is(o, strategy)', function()
    describe('strategy == "basic"', function()
      it('should return true if o is a table when strategy is "basic"', function()
        assert.True(Array.is({ 1 }, IsArrayStrategy.BASIC))
        assert.True(Array.is({ 1, 2 }, IsArrayStrategy.BASIC))
        assert.True(Array.is({ 1, 2, 3 }, IsArrayStrategy.BASIC))

        assert.True(Array.is({ 'c' }, IsArrayStrategy.BASIC))
        assert.True(Array.is({ 'c', 'b' }, IsArrayStrategy.BASIC))
        assert.True(Array.is({ 'c', 'b', 'a' }, IsArrayStrategy.BASIC))

        ---@note: demonstrates shortcoming of the "basic" strategy
        assert.True(Array.is({ a = 1  }, IsArrayStrategy.BASIC))
        assert.True(Array.is({ a = 1, b = 2  }, IsArrayStrategy.BASIC))
        assert.True(Array.is({ a = 1, b = 2, c = 3  }, IsArrayStrategy.BASIC))
      end)
      it('should return false if o is not a table when strategy is "basic"', function()
        assert.False(Array.is(1, IsArrayStrategy.BASIC))
        assert.False(Array.is('a', IsArrayStrategy.BASIC))
        assert.False(Array.is(false, IsArrayStrategy.BASIC))
        assert.False(Array.is(true, IsArrayStrategy.BASIC))
      end)
    end)
    describe('strategy == "fast"', function()
      it('should return true if o is a table and there are values at 1 and #tbl when strategy is "fast"', function()
        assert.True(Array.is({ 1 }, IsArrayStrategy.FAST))
        assert.True(Array.is({ 1, 2 }, IsArrayStrategy.FAST))
        assert.True(Array.is({ 1, 2, 3 }, IsArrayStrategy.FAST))

        assert.True(Array.is({ 'c' }, IsArrayStrategy.FAST))
        assert.True(Array.is({ 'c', 'b' }, IsArrayStrategy.FAST))
        assert.True(Array.is({ 'c', 'b', 'a' }, IsArrayStrategy.FAST))

        ---@note: demonstrates shortcomings of the "fast" strategy
        assert.True(Array.is({ 'a', 'b', 'c', d = 4 }, IsArrayStrategy.FAST))
        assert.True(Array.is({ [1] = 'a', [2] = 'b', [4] = 'c' }, IsArrayStrategy.FAST))
      end)
      it('should return false if o is not a table or there are not values at 1 or #tbl when strategy is "fast"', function()
        assert.False(Array.is(1, IsArrayStrategy.FAST))
        assert.False(Array.is('a', IsArrayStrategy.FAST))
        assert.False(Array.is(false, IsArrayStrategy.FAST))
        assert.False(Array.is(true, IsArrayStrategy.FAST))

        assert.False(Array.is({ a = 1 }, IsArrayStrategy.FAST))
        assert.False(Array.is({ a = 1, b = 2 }, IsArrayStrategy.FAST))
        assert.False(Array.is({ a = 1, b = 2, c = 3 }, IsArrayStrategy.FAST))
        assert.False(Array.is({ [2] = 'a', [3] = 'b', [4] = 'c' }, IsArrayStrategy.FAST))
      end)
    end)
    describe('strategy == "strict"', function()
      it('should return true if o is a table and there are values at 1-#tbl when strategy is "strict"', function()
        assert.True(Array.is({ 1 }, IsArrayStrategy.STRICT))
        assert.True(Array.is({ 1, 2 }, IsArrayStrategy.STRICT))
        assert.True(Array.is({ 1, 2, 3 }, IsArrayStrategy.STRICT))
        assert.True(Array.is({ 1, 2, 3, 4 }, IsArrayStrategy.STRICT))
      end)
      it('should return false if o is not a table or there are not values at 1-#tbl when strategy is "strict"', function()
        assert.False(Array.is(1, IsArrayStrategy.STRICT))
        assert.False(Array.is('a', IsArrayStrategy.STRICT))
        assert.False(Array.is(false, IsArrayStrategy.STRICT))
        assert.False(Array.is(true, IsArrayStrategy.STRICT))

        assert.False(Array.is({ a = 1 }, IsArrayStrategy.STRICT))
        assert.False(Array.is({ a = 1, b = 2 }, IsArrayStrategy.STRICT))
        assert.False(Array.is({ a = 1, b = 2, c = 3 }, IsArrayStrategy.STRICT))
        assert.False(Array.is({ [2] = 'a', [3] = 'b', [4] = 'c' }, IsArrayStrategy.STRICT))

        assert.False(Array.is({ 'a', 'b', 'c', d = 4 }, IsArrayStrategy.STRICT))
        assert.False(Array.is({ [1] = 'a', [2] = 'b', [4] = 'c' }, IsArrayStrategy.STRICT))
      end)
    end)
  end)

  describe('.is_empty(arr, strict)', function ()
    describe('array is empty', function()
      it('it should return true if arr is empty and strict is true', function ()
        assert.True(Array.is_empty({}))
        assert.True(Array.is_empty({ nil }))
      end)
      it('it should return true if arr is empty and strict is false', function ()
        assert.True(Array.is_empty({}, false))
        assert.True(Array.is_empty({ nil }, false))
      end)
    end)
    describe('array is not empty', function()
      it('it should return false if arr is not empty and strict is true', function ()
        assert.False(Array.is_empty({ 1 }))
        assert.False(Array.is_empty({ 'z' }))

        assert.False(Array.is_empty({ 3, 1, 2 }))
        assert.False(Array.is_empty({ 'wof', 'xor', 'asb', 'zab' }))
      end)
      it('it should return false if arr is not empty and strict is false', function ()
        assert.False(Array.is_empty({ 1 }, false))
        assert.False(Array.is_empty({ 'z' }, false))

        assert.False(Array.is_empty({ 3, 1, 2 }, false))
        assert.False(Array.is_empty({ 'wof', 'xor', 'asb', 'zab' }, false))
      end)
    end)
    describe('array is nil', function()
      it('it should raise and error if arr is nil and strict is true', function ()
        assert.has_error(function()
          Array.is_empty(nil)
        end)
      end)
      it('it should return true if arr is nil and strict is false', function ()
          Array.is_empty(nil, false)
      end)
    end)
  end)

  describe('.nil_or_empty(arr)', function()
    it('should return true if arr is nil', function()
      assert.True(Array.nil_or_empty(nil))
    end)
    it('should return true if arr is empty', function()
      assert.True(Array.nil_or_empty({}))
      assert.True(Array.nil_or_empty({ nil }))
      assert.True(Array.nil_or_empty({ nil, nil }))
    end)
    it('should return false if arr is not empty', function()
      assert.False(Array.nil_or_empty({ 1 }))
      assert.False(Array.nil_or_empty({ 1, 2, 3 }))
      assert.False(Array.nil_or_empty({ 101, 2.34, 85, 'abacus' }))
    end)
  end)

  describe('.not_nil_or_empty(arr)', function()
    it('should return true if arr is not empty', function()
      assert.True(Array.not_nil_or_empty({ 1 }))
      assert.True(Array.not_nil_or_empty({ 1, 2, 3 }))
      assert.True(Array.not_nil_or_empty({ 101, 2.34, 85, 'abacus' }))
    end)
    it('should return false if arr is nil', function()
      assert.False(Array.not_nil_or_empty(nil))
    end)
    it('should return false if arr is empty', function()
      assert.False(Array.not_nil_or_empty({}))
      assert.False(Array.not_nil_or_empty({ nil }))
      assert.False(Array.not_nil_or_empty({ nil, nil }))
    end)
  end)

  describe('.len(arr)', function()
    it('should return the number of elements in arr if arr is not empty', function()
      assert.equals(1, Array.len({ 'foo' }))
      assert.equals(2, Array.len({ 'foo', 'bar' }))
      assert.equals(3, Array.len({ 'foo', 'bar', 'baz' }))
    end)
    it('should return 0 if arr is empty', function()
      assert.equals(0, Array.len({}))
    end)
    it('should return 0 if arr is nil', function()
      assert.equals(0, Array.len(nil))
    end)
  end)

  describe('.equals(l, r)', function()
    it('should return true if l == r', function()
      assert.True(Array.equals({ 1, 2, 3 }, { 1, 2, 3 }))
    end)
    it('should return true if l == r and their lengths are 1', function()
      assert.True(Array.equals({ 1 }, { 1 }))
    end)
    it("should return true if l == r and they're both empty", function()
      assert.True(Array.equals({}, {}))
    end)
    it('should return false if l ~= r', function()
      assert.False(Array.equals({ 1, 2, 3 }, { 3, 2, 1 }))
    end)
    it('should return false if #l ~= #r', function()
      assert.False(Array.equals({ 1, 2, 3 }, { 3, 2 }))
    end)
    it('should return false if #l ~= #r because of differen internal types', function()
      assert.False(Array.equals({ 1, 2, 3 }, { 'a', 'b', 'c'}))
    end)
    it('should return false if #l ~= #r and their lengths are 1', function()
      assert.False(Array.equals({ 1 }, { 2 }))
    end)
    it('should return false if #l ~= #r and l is empty', function()
      assert.False(Array.equals({}, { 1, 2, 3 }))
    end)
    it('should return false if #l ~= #r and r is empty', function()
      assert.False(Array.equals({ 1, 2, 3 }, {}))
    end)
  end)

  describe('.indexof(arr, entry, compare)', function()
    local arr = { 'a', 'b', 'c', 'd', 'e' }

    it("should return the index of the entry if it's in the arr", function()
      assert.equals(Array.indexof(arr, 'a'), 1)
      assert.equals(Array.indexof(arr, 'c'), 3)
      assert.equals(Array.indexof(arr, 'e'), 5)
    end)
    it("should return the nil if the entry isn't in the arr", function()
      assert.Nil(Array.indexof(arr, 'f'))
    end)
    it('should allow for a custom compare function that returns an index if the it returns true', function()
      local compare = function(entry, e) return  Common.String.fmt('%s-%s', entry, e) == '1-c' end
      assert.equals(Array.indexof(arr, 1, compare), 3)
    end)
    it('should allow for a custom compare function that returns nil if it never returns true', function()
      local compare = function(entry, e) return  Common.String.fmt('%s-%s', entry, e) == '1-f' end
      assert.Nil(Array.indexof(arr, 1, compare))
    end)
  end)

  describe('.append(arr, item)', function()
    it('it should append to an empty array', function()
        local arr = {}
        Array.append(arr, 1)

        assert.True(Array.equals(arr, { 1 }))
    end)
    it('it should append to an non-empty array', function()
        local arr = { 84, 35, 9000.123 }
        Array.append(arr, 111)

        assert.True(Array.equals(arr, { 84, 35, 9000.123, 111 }))
    end)
  end)

  describe('.reversed(arr)', function()
    it('should return an array w/ the items in arr, reversed', function()
      assert.True(Array.equals(Array.reversed({ 1, 2, 3, 4, 5 }), { 5, 4, 3, 2, 1 }))
    end)
    it('should work on arrays w/ len == 1', function()
      assert.True(Array.equals(Array.reversed({ 1 }), { 1 }))
    end)
    it('should work on empty arrays', function()
      assert.True(Array.equals(Array.reversed({}), {}))
    end)
  end)

  describe('.slice(arr, s, e)', function()
    local arr = { 1, 2, 3, 4, 5 }

    it('should return the slice starting a s and ending at e', function()
      assert.True(Array.equals(Array.slice(arr, 1, 1), { 1 }))
      assert.True(Array.equals(Array.slice(arr, 1, 2), { 1, 2 }))
      assert.True(Array.equals(Array.slice(arr, 1, 3), { 1, 2, 3 }))
      assert.True(Array.equals(Array.slice(arr, 2, 4), { 2, 3, 4 }))
      assert.True(Array.equals(Array.slice(arr, 3, 5), { 3, 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 4, 5), { 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 5, 5), { 5 }))
    end)
    it('should bound s at 1 if s < 1', function()
      assert.True(Array.equals(Array.slice(arr, 0, 4), { 1, 2, 3, 4 }))
      assert.True(Array.equals(Array.slice(arr, -2, 1), { 1 }))
      assert.True(Array.equals(Array.slice(arr, -3, 2), { 1, 2 }))
    end)
    it('should bound e at #arr if e < #arr', function()
      assert.True(Array.equals(Array.slice(arr, 1, 6), { 1, 2, 3, 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 2, 8), { 2, 3, 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 5, 10), { 5 }))
    end)
    it("should use #arr if e isn't provided", function()
      assert.True(Array.equals(Array.slice(arr, 1), { 1, 2, 3, 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 2), { 2, 3, 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 5), { 5 }))
    end)
    it('should treat e as e + #arr if e < 1', function()
      assert.True(Array.equals(Array.slice(arr, 1, -3), { 1, 2 }))
      assert.True(Array.equals(Array.slice(arr, 2, -1), { 2, 3, 4 }))
      assert.True(Array.equals(Array.slice(arr, 3, -2), { 3 }))
    end)
    it('should return an empty array if s > e', function()
      assert.True(Array.equals(Array.slice(arr, 3, 2), {}))
      assert.True(Array.equals(Array.slice(arr, 2, -4), {}))
    end)
    -- TODO: pin down expected behavior
    -- it('should bound s and e even if s > e', function()
    --   assert.True(Array.equals(Array.slice(arr, 6, 0), { 5 }))
    --   assert.True(Array.equals(Array.slice(arr, 1, -7), { 1 }))
    -- end)
    it('return an empty array if arr is empty', function()
      assert.True(Array.equals(Array.slice({}, 1), {}))
      assert.True(Array.equals(Array.slice({}, 1, 0), {}))
    end)
  end)

  describe('.fill(o, n)', function()
    it('should return an array w/ n "o"s in it', function()
      assert.True(Array.equals(Array.fill(22, 3), { 22, 22, 22 }))
      assert.True(Array.equals(Array.fill('hb4b', 4), { 'hb4b', 'hb4b', 'hb4b', 'hb4b' }))
      assert.True(Array.equals(Array.fill(false, 1), { false }))
    end)
    it('should return an array w/ n "o"s in it', function()
      assert.True(Array.equals(Array.fill(22, 3), { 22, 22, 22 }))
      assert.True(Array.equals(Array.fill('hb4b', 4), { 'hb4b', 'hb4b', 'hb4b', 'hb4b' }))
      assert.True(Array.equals(Array.fill(false, 1), { false }))
    end)
  end)
end)

