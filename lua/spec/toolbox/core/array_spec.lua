local Array = require 'toolbox.core.array'


describe('Array', function()
  describe('.equals(l, r)', function()
    it('should return true if l == r', function()
      assert.True(Array.equals({ 1, 2, 3 }, { 1, 2, 3 }))
    end)
    it('should return true if l == r and their lengths are 1', function()
      assert.True(Array.equals({ 1 }, { 1 }))
    end)
    it("should return true if l == r and they're both empty", function()
      assert.True(Array.equals({}, {}))
    end)
    it('should return false if l ~= r', function()
      assert.False(Array.equals({ 1, 2, 3 }, { 3, 2, 1 }))
    end)
    it('should return false if #l ~= #r', function()
      assert.False(Array.equals({ 1, 2, 3 }, { 3, 2 }))
    end)
    it('should return false if #l ~= #r and their lengths are 1', function()
      assert.False(Array.equals({ 1 }, { 2 }))
    end)
    it('should return false if #l ~= #r and l is empty', function()
      assert.False(Array.equals({}, { 1, 2, 3 }))
    end)
    it('should return false if #l ~= #r and r is empty', function()
      assert.False(Array.equals({ 1, 2, 3 }, {}))
    end)
  end)

  describe('.indexof(arr, entry, compare)', function()
    local arr = { 'a', 'b', 'c', 'd', 'e' }

    it("should return the index of the entry if it's in the arr", function()
      assert.equals(Array.indexof(arr, 'a'), 1)
      assert.equals(Array.indexof(arr, 'c'), 3)
      assert.equals(Array.indexof(arr, 'e'), 5)
    end)
    it("should return the nil if the entry isn't in the arr", function()
      assert.Nil(Array.indexof(arr, 'f'))
    end)
    -- it('should allow for a custom compare', function()
    --   local compare = function(l, r) return l > r end
    --   assert.Nil(Array.indexof(arr, 'f'))
    -- end)
  end)

  describe('.reversed(arr)', function()
    it('should return an array w/ the items in arr, reversed', function()
      assert.True(Array.equals(Array.reversed({ 1, 2, 3, 4, 5 }), { 5, 4, 3, 2, 1 }))
    end)
    it('should work on arrays w/ len == 1', function()
      assert.True(Array.equals(Array.reversed({ 1 }), { 1 }))
    end)
    it('should work on empty arrays', function()
      assert.True(Array.equals(Array.reversed({}), {}))
    end)
  end)

  describe('.slice(arr, s, e)', function()
    local arr = { 1, 2, 3, 4, 5 }

    it('should return the slice starting a s and ending at e', function()
      assert.True(Array.equals(Array.slice(arr, 1, 1), { 1 }))
      assert.True(Array.equals(Array.slice(arr, 1, 2), { 1, 2 }))
      assert.True(Array.equals(Array.slice(arr, 1, 3), { 1, 2, 3 }))
      assert.True(Array.equals(Array.slice(arr, 2, 4), { 2, 3, 4 }))
      assert.True(Array.equals(Array.slice(arr, 3, 5), { 3, 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 4, 5), { 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 5, 5), { 5 }))
    end)
    it('should bound s at 1 if s < 1', function()
      assert.True(Array.equals(Array.slice(arr, 0, 4), { 1, 2, 3, 4 }))
      assert.True(Array.equals(Array.slice(arr, -2, 1), { 1 }))
      assert.True(Array.equals(Array.slice(arr, -3, 2), { 1, 2 }))
    end)
    it('should bound e at #arr if e < #arr', function()
      assert.True(Array.equals(Array.slice(arr, 1, 6), { 1, 2, 3, 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 2, 8), { 2, 3, 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 5, 10), { 5 }))
    end)
    it("should use #arr if e isn't provided", function()
      assert.True(Array.equals(Array.slice(arr, 1), { 1, 2, 3, 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 2), { 2, 3, 4, 5 }))
      assert.True(Array.equals(Array.slice(arr, 5), { 5 }))
    end)
    it('should treat e as e + #arr if e < 1', function()
      assert.True(Array.equals(Array.slice(arr, 1, -3), { 1, 2 }))
      assert.True(Array.equals(Array.slice(arr, 2, -1), { 2, 3, 4 }))
      assert.True(Array.equals(Array.slice(arr, 3, -2), { 3 }))
    end)
    it('should return an empty array if s > e', function()
      assert.True(Array.equals(Array.slice(arr, 3, 2), {}))
      assert.True(Array.equals(Array.slice(arr, 2, -4), {}))
    end)
    it('should bound s and e even if s > e', function()
      assert.True(Array.equals(Array.slice(arr, 6, 0), { 5 }))
      assert.True(Array.equals(Array.slice(arr, 1, -7), { 1 }))
    end)
    it('return an empty array if arr is empty', function()
      assert.True(Array.equals(Array.slice({}, 1), {}))
      assert.True(Array.equals(Array.slice({}, 1, 0), {}))
    end)
  end)
end)

