local Stack = require 'toolbox.extensions.stack'

local assert = require 'luassert.assert'

require 'toolbox.test.extensions'


describe('stack assert modifier', function()
  describe('contains', function()
    it('should succeed if the stack contains all provided values', function()
      assert.stack(Stack.new('a', 'b', 'c')).contains({ 'b' })
      assert.stack(Stack.new('a', 'b', 'c')).contains({ 'b', 'a' })
      assert.stack(Stack.new('a', 'b', 'c')).contains({ 'c', 'b', 'a' })
    end)
    it("should fail if the stack doesn't contain one or more provided values", function()
      assert.has.error(function()
        assert.stack(Stack.new('a', 'b', 'c')).contains({ 'd' })
      end)
      assert.has.error(function()
        assert.stack(Stack.new('a', 'b', 'c')).contains({ 'b', 'a', 'd' })
      end)
      assert.has.error(function()
        assert.stack(Stack.new('a', 'b', 'c')).contains({ 'b', 'a', 'c', 'd' })
      end)
    end)
    it('should succeed when negated if the stack is missing at least one of the provided values', function()
      assert.stack(Stack.new('a', 'b', 'c')).does_not.contain({ 'a', 'd' })
      assert.stack(Stack.new('a', 'b', 'c')).does_not.contain({ 'd', 'b', 'c', 'e' })
      assert.stack(Stack.new('a', 'b', 'c')).does_not.contain({ 'd', 'e', 'z' })
    end)
    it('should fail when negated if the stack contains all provided values', function()
      assert.has.error(function()
        assert.stack(Stack.new('a', 'b', 'c')).does_not.contain({ 'a', 'c', 'b' })
      end)
      assert.has.error(function()
        assert.stack(Stack.new('a', 'b', 'c')).does_not.contain({ 'b', 'c' })
      end)
      assert.has.error(function()
        assert.stack(Stack.new('a', 'b', 'c')).does_not.contain({ 'a' })
      end)
    end)
    it('should always fail on empty stacks', function()
      assert.has.error(function()
        assert.stack(Stack.new()).contains({ 'a' })
      end)
      assert.has.error(function()
        assert.stack(Stack.new()).contains({ 'c', 'a', 'b' })
      end)
      assert.has.error(function()
        assert.stack(Stack.new()).contains({ 'c', 'a', 'z', 'b', 'd' })
      end)
    end)
    it('should always succeed on empty stack when negated', function()
      assert.stack(Stack.new()).does_not.contain({ 'b' })
      assert.stack(Stack.new()).does_not.contain({ 'b', 'a' })
      assert.stack(Stack.new()).does_not.contain({ 'b', 'a', 'c' })
    end)
  end)

  describe('empty', function()
    it('should succeed if the stack is empty', function()
      assert.stack(Stack.new()).is.empty()
    end)
    it("should fail if the stack isn't empty", function()
      assert.has.error(function()
        assert.stack(Stack.new(1)).is.empty()
      end)
      assert.has.error(function()
        assert.stack(Stack.new(2, 1)).is.empty()
      end)
      assert.has.error(function()
        assert.stack(Stack.new(3, 2, 1)).is.empty()
      end)
    end)
    it("should succeed when negated if the stack isn't empty", function()
      assert.stack(Stack.new(1)).is_not.empty()
      assert.stack(Stack.new(1, 2)).is_not.empty()
      assert.stack(Stack.new(1, 2, 3)).is_not.empty()
    end)
    it("should fail when negated if the stack is empty", function()
      assert.has.error(function()
        assert.stack(Stack.new()).is_not.empty()
      end)
    end)
  end)

  describe('eq', function()
    it('should succeed if the stacks are equal', function()
      assert.stack(Stack.new()).eq(Stack.new())
      assert.stack(Stack.new(3)).eq(Stack.new(3))
      assert.stack(Stack.new(1, 2, 3)).eq(Stack.new(1, 2, 3))
    end)
    it('should fail if the stacks are not equal', function()
      assert.has.error(function()
        assert.stack(Stack.new(3, 2, 1)).eq(Stack.new(1, 2, 3))
      end)
      assert.has.error(function()
        assert.stack(Stack.new(1, 2)).eq(Stack.new(1, 2, 3))
      end)
      assert.has.error(function()
        assert.stack(Stack.new(1, 2, 3)).eq(Stack.new(1, 2))
      end)
    end)
    it('should succeed if negated if the stacks are not equal', function()
      assert.stack(Stack.new()).does_not.eq(Stack.new(8))
      assert.stack(Stack.new(3)).does_not.eq(Stack.new(3, 2))
      assert.stack(Stack.new(1, 3, 2)).does_not.eq(Stack.new(1, 3, 2, 4))
    end)
    it('should fail if negated if the stacks are equal', function()
      assert.has.error(function()
        assert.stack(Stack.new()).does_not.eq(Stack.new())
      end)
      assert.has.error(function()
        assert.stack(Stack.new(3, 2, 1)).does_not.eq(Stack.new(3, 2, 1))
      end)
      assert.has.error(function()
        assert.stack(Stack.new(1)).does_not.eq(Stack.new(1))
      end)
    end)
  end)

  describe('is', function()
    it('should succeed if the stacks are the same object', function()
      local stack1 = Stack.new()
      local stack2 = Stack.new(3)
      local stack3 = Stack.new(3, 1, 3, 2)

      assert.stack(stack1).is(stack1)
      assert.stack(stack2).is(stack2)
      assert.stack(stack3).is(stack3)
    end)
    it('should fail if the stacks are not the same object', function()
      assert.has.error(function()
        assert.stack(Stack.new(3, 2, 1)).is(Stack.new(3, 1, 2))
      end)
      assert.has.error(function()
        assert.stack(Stack.new(1, 2)).is(Stack.new(2, 2, 1))
      end)
      assert.has.error(function()
        assert.stack(Stack.new(4, 8)).is(Stack.new(8, 4))
      end)
    end)
    it('should succeed when negated if the stacks are not the same object', function()
      assert.stack(Stack.new(3, 2, 1)).Not.is(Stack.new(3, 2, 1))
      assert.stack(Stack.new(1, 2)).Not.is(Stack.new(1, 2))
      assert.stack(Stack.new(4, 8)).Not.is(Stack.new(4, 8))
    end)
    it('should fail when negated if the stacks are the same object', function()
      local stack1 = Stack.new()
      local stack2 = Stack.new(3)
      local stack3 = Stack.new(1, 2, 3)

      assert.has.error(function()
        assert.stack(stack1).Not.is(stack1)
      end)
      assert.has.error(function()
        assert.stack(stack2).Not.is(stack2)
      end)
      assert.has.error(function()
        assert.stack(stack3).Not.is(stack3)
      end)
    end)
  end)

  describe('length', function()
    it('should succeed if the stack has the asserted length', function()
      assert.stack(Stack.new(1)).has.length(1)
      assert.stack(Stack.new(1, 2)).has.length(2)
      assert.stack(Stack.new(1, 2, 3)).has.length(3)
    end)
    it("should fail if the stack doesn't have the asserted length", function()
      assert.has.error(function()
        assert.stack(Stack.new(1)).has.length(2)
      end)
      assert.has.error(function()
        assert.stack(Stack.new(1, 2)).has.length(1)
      end)
      assert.has.error(function()
        assert.stack(Stack.new(1, 2, 3)).has.length(0)
      end)
    end)
    it("should succeed when negated if the stack doesn't have the asserted length", function()
      assert.stack(Stack.new(1)).Not.length(3)
      assert.stack(Stack.new(1, 2)).Not.length(1)
      assert.stack(Stack.new(1, 2, 3)).Not.length(6)
    end)
    it("should fail when negated if the stack does have the asserted length", function()
      assert.has.error(function()
        assert.stack(Stack.new(1)).Not.length(1)
      end)
      assert.has.error(function()
        assert.stack(Stack.new(1, 2)).Not.length(2)
      end)
      assert.has.error(function()
        assert.stack(Stack.new(1, 2, 3)).Not.length(3)
      end)
    end)
  end)
end)

