local assert = require 'luassert.assert'

require 'toolbox.test.extensions'

describe('array assert modifier', function()
  describe('contains', function()
    it('should succeed if the array contains all provided values', function()
      assert.array({ 'a', 'b', 'c' }).contains({ 'b' })
      assert.array({ 'a', 'b', 'c' }).contains({ 'b', 'a' })
      assert.array({ 'a', 'b', 'c' }).contains({ 'b', 'a', 'c' })
    end)
    it("should fail if the array doesn't contain one or more provided values", function()
      assert.has.error(function()
        assert.array({ 'a', 'b', 'c' }).contains({ 'd' })
      end)
      assert.has.error(function()
        assert.array({ 'a', 'b', 'c' }).contains({ 'b', 'a', 'd' })
      end)
      assert.has.error(function()
        assert.array({ 'a', 'b', 'c' }).contains({ 'b', 'a', 'c', 'd' })
      end)
    end)
    it('should succeed when negated if the array is missing at least one of the provided values', function()
      assert.array({ 'a', 'b', 'c' }).does_not.contain({ 'a', 'd' })
      assert.array({ 'a', 'b', 'c' }).does_not.contain({ 'd', 'b', 'c', 'e' })
      assert.array({ 'a', 'b', 'c' }).does_not.contain({ 'd', 'e', 'z' })
    end)
    it('should fail when negated if the array contains all provided values', function()
      assert.has.error(function()
        assert.array({ 'a', 'b', 'c' }).does_not.contain({ 'a', 'c', 'b' })
      end)
      assert.has.error(function()
        assert.array({ 'a', 'b', 'c' }).does_not.contain({ 'b', 'c' })
      end)
      assert.has.error(function()
        assert.array({ 'a', 'b', 'c' }).does_not.contain({ 'a' })
      end)
    end)
    it('should always fail on empty arrays', function()
      assert.has.error(function()
        assert.array({}).contains({ 'a' })
      end)
      assert.has.error(function()
        assert.array({}).contains({ 'c', 'a', 'b' })
      end)
      assert.has.error(function()
        assert.array({}).contains({ 'c', 'a', 'z', 'b', 'd' })
      end)
    end)
    it('should always succeed on empty arrays when negated', function()
      assert.array({}).does_not.contain({ 'b' })
      assert.array({}).does_not.contain({ 'b', 'a' })
      assert.array({}).does_not.contain({ 'b', 'a', 'c' })
    end)
  end)

  describe('empty', function()
    it('should succeed if the array is empty', function()
      assert.array({}).is.empty()
    end)
    it("should fail if the array isn't empty", function()
      assert.has.error(function()
        assert.array({ 1 }).is.empty()
      end)
      assert.has.error(function()
        assert.array({ 2, 1 }).is.empty()
      end)
      assert.has.error(function()
        assert.array({ 3, 2, 1 }).is.empty()
      end)
    end)
    it("should succeed when negated if the array isn't empty", function()
      assert.array({ 1 }).is_not.empty()
      assert.array({ 1, 2 }).is_not.empty()
      assert.array({ 1, 2, 3 }).is_not.empty()
    end)
    it('should fail when negated if the array is empty', function()
      assert.has.error(function()
        assert.array({}).is_not.empty()
      end)
    end)
  end)

  describe('length', function()
    it('should succeed if the array has the asserted length', function()
      assert.array({ 1 }).has.length(1)
      assert.array({ 1, 2 }).has.length(2)
      assert.array({ 1, 2, 3 }).has.length(3)
    end)
    it("should fail if the array doesn't have the asserted length", function()
      assert.has.error(function()
        assert.array({ 1 }).has.length(2)
      end)
      assert.has.error(function()
        assert.array({ 1, 2 }).has.length(1)
      end)
      assert.has.error(function()
        assert.array({ 1, 2, 3 }).has.length(0)
      end)
    end)
    it("should succeed when negated if the array doesn't have the asserted length", function()
      assert.array({ 1 }).Not.length(3)
      assert.array({ 1, 2 }).Not.length(1)
      assert.array({ 1, 2, 3 }).Not.length(6)
    end)
    it('should fail when negated if the array does have the asserted length', function()
      assert.has.error(function()
        assert.array({ 1 }).Not.length(1)
      end)
      assert.has.error(function()
        assert.array({ 1, 2 }).Not.length(2)
      end)
      assert.has.error(function()
        assert.array({ 1, 2, 3 }).Not.length(3)
      end)
    end)
  end)
end)
