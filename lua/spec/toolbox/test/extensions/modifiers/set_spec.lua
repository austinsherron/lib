local Set = require 'toolbox.extensions.set'

local assert = require 'luassert.assert'

require 'toolbox.test.extensions'

describe('set assert modifier', function()
  describe('contains', function()
    it('should succeed if the set contains all provided values', function()
      assert.set(Set.of('a', 'b', 'c')).contains({ 'b' })
      assert.set(Set.of('a', 'b', 'c')).contains({ 'b', 'a', 'a' })
      assert.set(Set.of('a', 'b', 'c')).contains({ 'c', 'b', 'a' })
    end)
    it("should fail if the set doesn't contain one or more provided values", function()
      assert.has.error(function()
        assert.set(Set.of('a', 'b', 'c')).contains({ 'd' })
      end)
      assert.has.error(function()
        assert.set(Set.of('a', 'b', 'c')).contains({ 'b', 'a', 'd' })
      end)
      assert.has.error(function()
        assert.set(Set.of('a', 'b', 'c')).contains({ 'b', 'a', 'c', 'd' })
      end)
    end)
    it('should succeed when negated if the set is missing at least one of the provided values', function()
      assert.set(Set.of('a', 'b', 'c')).does_not.contain({ 'a', 'd' })
      assert.set(Set.of('a', 'b', 'c')).does_not.contain({ 'd', 'b', 'c', 'e' })
      assert.set(Set.of('a', 'b', 'c')).does_not.contain({ 'd', 'e', 'z' })
    end)
    it('should fail when negated if the set contains all provided values', function()
      assert.has.error(function()
        assert.set(Set.of('a', 'b', 'c')).does_not.contain({ 'a', 'c', 'b' })
      end)
      assert.has.error(function()
        assert.set(Set.of('a', 'b', 'c')).does_not.contain({ 'b', 'c' })
      end)
      assert.has.error(function()
        assert.set(Set.of('a', 'b', 'c')).does_not.contain({ 'a' })
      end)
    end)
    it('should always fail on empty sets', function()
      assert.has.error(function()
        assert.set(Set.empty()).contains({ 'a' })
      end)
      assert.has.error(function()
        assert.set(Set.empty()).contains({ 'c', 'a', 'b' })
      end)
      assert.has.error(function()
        assert.set(Set.empty()).contains({ 'c', 'a', 'z', 'b', 'd' })
      end)
    end)
    it('should always succeed on empty set when negated', function()
      assert.set(Set.empty()).does_not.contain({ 'b' })
      assert.set(Set.empty()).does_not.contain({ 'b', 'a' })
      assert.set(Set.empty()).does_not.contain({ 'b', 'a', 'c' })
    end)
  end)

  describe('empty', function()
    it('should succeed if the set is empty', function()
      assert.set(Set.empty()).is.empty()
    end)
    it("should fail if the set isn't empty", function()
      assert.has.error(function()
        assert.set(Set.only(1)).is.empty()
      end)
      assert.has.error(function()
        assert.set(Set.of(2, 1)).is.empty()
      end)
      assert.has.error(function()
        assert.set(Set.of(3, 2, 1)).is.empty()
      end)
    end)
    it("should succeed when negated if the set isn't empty", function()
      assert.set(Set.only(1)).is_not.empty()
      assert.set(Set.of(1, 2)).is_not.empty()
      assert.set(Set.of(1, 2, 3)).is_not.empty()
    end)
    it('should fail when negated if the set is empty', function()
      assert.has.error(function()
        assert.set(Set.empty()).is_not.empty()
      end)
    end)
  end)

  describe('eq', function()
    it('should succeed if the sets are equal', function()
      assert.set(Set.empty()).eq(Set.empty())
      assert.set(Set.only(3)).eq(Set.only(3))
      assert.set(Set.of(3, 1, 3, 2)).eq(Set.of(1, 2, 3))
    end)
    it('should fail if the sets are not equal', function()
      assert.has.error(function()
        assert.set(Set.of(3, 2, 1)).eq(Set.of(4, 1, 2))
      end)
      assert.has.error(function()
        assert.set(Set.of(1, 2)).eq(Set.of(4, 1, 2))
      end)
      assert.has.error(function()
        assert.set(Set.of(4, 8)).eq(Set.of(1, 2, 3))
      end)
    end)
    it('should succeed if negated if the sets are not equal', function()
      assert.set(Set.empty()).does_not.eq(Set.only(8))
      assert.set(Set.only(3)).does_not.eq(Set.of(3, 8, 1))
      assert.set(Set.of(3, 1, 3, 2)).does_not.eq(Set.of(3, 1, 3, 2, 4))
    end)
    it('should fail if negated if the sets are equal', function()
      assert.has.error(function()
        assert.set(Set.of(3, 2, 1)).does_not.eq(Set.of(1, 2, 3))
      end)
      assert.has.error(function()
        assert.set(Set.of(1, 2)).does_not.eq(Set.of(1, 1, 2, 2))
      end)
      assert.has.error(function()
        assert.set(Set.of(4, 8)).does_not.eq(Set.of(8, 4, 4))
      end)
    end)
  end)

  describe('is', function()
    it('should succeed if the sets are the same object', function()
      local set1 = Set.empty()
      local set2 = Set.only(3)
      local set3 = Set.of(3, 1, 3, 2)

      assert.set(set1).is(set1)
      assert.set(set2).is(set2)
      assert.set(set3).is(set3)
    end)
    it('should fail if the sets are not the same object', function()
      assert.has.error(function()
        assert.set(Set.of(3, 2, 1)).is(Set.of(3, 1, 2))
      end)
      assert.has.error(function()
        assert.set(Set.of(1, 2)).is(Set.of(2, 2, 1))
      end)
      assert.has.error(function()
        assert.set(Set.of(4, 8)).is(Set.of(8, 4))
      end)
    end)
    it('should succeed when negated if the sets are not the same object', function()
      assert.set(Set.of(3, 2, 1)).Not.is(Set.of(3, 1, 2))
      assert.set(Set.of(1, 2)).Not.is(Set.of(2, 2, 1))
      assert.set(Set.of(4, 8)).Not.is(Set.of(8, 4))
    end)
    it('should fail when negated if the sets are the same object', function()
      local set1 = Set.empty()
      local set2 = Set.only(3)
      local set3 = Set.of(3, 1, 3, 2)

      assert.has.error(function()
        assert.set(set1).Not.is(set1)
      end)
      assert.has.error(function()
        assert.set(set2).Not.is(set2)
      end)
      assert.has.error(function()
        assert.set(set3).Not.is(set3)
      end)
    end)
  end)

  describe('length', function()
    it('should succeed if the array has the asserted length', function()
      assert.set(Set.only(1)).has.length(1)
      assert.set(Set.of(1, 2, 1)).has.length(2)
      assert.set(Set.of(1, 1, 2, 3)).has.length(3)
    end)
    it("should fail if the array doesn't have the asserted length", function()
      assert.has.error(function()
        assert.set(Set.only(1)).has.length(2)
      end)
      assert.has.error(function()
        assert.set(Set.of(1, 2, 2)).has.length(1)
      end)
      assert.has.error(function()
        assert.set(Set.of(1, 2, 1, 3)).has.length(0)
      end)
    end)
    it("should succeed when negated if the array doesn't have the asserted length", function()
      assert.set(Set.only(1)).Not.length(3)
      assert.set(Set.of(1, 2)).Not.length(1)
      assert.set(Set.of(1, 2, 3)).Not.length(6)
    end)
    it('should fail when negated if the array does have the asserted length', function()
      assert.has.error(function()
        assert.set(Set.only(1)).Not.length(1)
      end)
      assert.has.error(function()
        assert.set(Set.of(2, 1, 2)).Not.length(2)
      end)
      assert.has.error(function()
        assert.set(Set.of(1, 2, 2, 3)).Not.length(3)
      end)
    end)
  end)
end)
